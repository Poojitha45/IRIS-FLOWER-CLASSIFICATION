# -*- coding: utf-8 -*-
"""IRIS  FLOWER  CLASSIFICATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CmLipZSVvDhS7dAnVVY7BZJxx21TE6E5
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **EXPLORATORY DATA ANALYSIS**"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/drive/MyDrive/IRIS.csv')

df

df.head()

df.tail()

"""# **DATA PROCESSING**"""

df.shape

df.info()

df.duplicated()

df.duplicated().sum()

df.drop_duplicates()

df.describe()

df.isnull()

df.isnull().sum()

"""# **SPLIT NUMERICAL AND CATAGORICAL DATA**"""

df_numerical_features = df.select_dtypes(include='number')
df_categorical_features = df.select_dtypes(include='category')

df_numerical_features = df.select_dtypes(exclude='object')
df_categorical_features = df.select_dtypes(include='object')

df_numerical_features.shape

df_categorical_features.shape

df.groupby('species').mean()

df.columns

"""# **DATA VISUALIZATION**"""

df['sepal_length'].hist(bins=40,color='blue')

df['petal_length'].hist(bins=30,color='violet')

df['sepal_width'].hist(bins=30,color='green')

df['petal_width'].hist(bins=30,color='orange')

sns.scatterplot(data=df,x='sepal_length',y='sepal_width',hue='species')
plt.show()

sns.scatterplot(x='petal_length',y='petal_width',hue='species',data=df)
plt.show()

sns.pairplot(data=df,hue="species",height=4)
plt.show()

sns.set(style='whitegrid')
sns.swarmplot(x="sepal_width",y="petal_length",data=df)

plt.figure(figsize=(9,8))
sns.heatmap(df.corr(),annot=True)
plt.plot()

df['sepal_length'].corr(df['petal_length'])

fig,ax=plt.subplots(2,2,figsize=(15,9))

sns.violinplot(data=df,y="petal_width",x="species",orient="v",ax=ax[0,0])
sns.violinplot(data=df,y="petal_length",x="species",orient="v",ax=ax[0,1])
sns.violinplot(data=df,y="sepal_length",x="species",orient="v",ax=ax[1,0])
sns.violinplot(data=df,y="sepal_width",x="species",orient="v",ax=ax[1,1])

plt.show()

fig,ax=plt.subplots(2,2,figsize=(15,9))

sns.boxplot(y="petal_width",x="species",data=df,orient="v",ax=ax[0,0])
sns.boxplot(y="petal_length",x="species",data=df,orient="v",ax=ax[0,1])
sns.boxplot(y="sepal_length",x="species",data=df,orient="v",ax=ax[1,0])
sns.boxplot(y="sepal_width",x="species",data=df,orient="v",ax=ax[1,1])

plt.show()

"""# **MACHILE LEARNING ALGORITHMS**"""

from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

"""# **SPLIT THE DATA SET INTO TRAIN DATA AND TEST DATA**"""

x=df.drop('species',axis=1)
y=df.species

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.3,random_state=5)

"""# **LOGISTIC REGRESSION**"""

from sklearn.linear_model import LogisticRegression
log = LogisticRegression()
log.fit(x, y)
y_pred = log.predict(x)
print(metrics.accuracy_score(y, y_pred))

"""# **SUPPORT VECTOR MACHINE(SVM)**"""

from sklearn.svm import SVC
svm = SVC(kernel='linear', random_state=0, gamma=.10, C=1.0)
svm.fit(x_train, y_train)

svm.score(x_test, y_test)

"""# **DECISION TREE CLASSIFIER**"""

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier()
dtree.fit(x_train, y_train)

dtree.score(x_test, y_test)

"""
#                  RESULTS

    
 *    LOGISTIC REGRESSION ACCURACCY           : 0.973%

*    SUPPORT VECTOR MACHINE(SVM) ACCURACY     : 0.95%

*    DECISION TREE CLASSIFIER ACCURACY         : 0.93%
"""